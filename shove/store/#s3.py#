# -*- coding: utf-8 -*-
'''
S3-accessed stores

shove's psuedo-URL for stores found on Amazon.com's S3 web service follows this
form:

s3://<s3_key>:<s3_secret>@<bucket>

<s3_key> is the Access Key issued by Amazon
<s3_secret> is the Secret Access Key issued by Amazon
<bucket> is the name of the bucket accessed through the S3 service
'''
print "archive.org version"

import boto.s3.connection

try:
    from boto.s3.connection import S3Connection
    from boto.s3.key import Key
except ImportError:
    raise ImportError('Requires boto library')

from shove import BaseStore

print "in debug version"

class S3Store(BaseStore):

    def __init__(self, engine=None, **kw):
        super(S3Store, self).__init__(engine, **kw)
        print "check this"
        print kw
        # key = Access Key, secret=Secret Access Key, bucket=bucket name
        bucket = kw.get('bucket')
        print kw
#        print secreck
        if engine is not None:
            print "CHECK " 
            print engine.split(':') [2]
            bucket= engine.split(':') [2]
            #print "test %s %s" % (test ,test2)
#[1].split('@')
            #bucket = engine.split('://')[1].split('@')
#            key, secret = auth.split(':')
        # kw 'secure' = (True or False, use HTTPS)
        #self._conn = S3Connection(key, secret, kw.get('secure', False))
        print "going to connect";
        self._conn = boto.connect_s3(host='s3.us.archive.org', is_secure=False)
        print self._conn
        buckets = self._conn.get_all_buckets()
#        print buckets

        try:
            b = buckets[bucket]
        except:
            print "no"
            

        # Use bucket if it exists
        for b in buckets:
#            print "compare %s and %s " % (b.name , bucket)
            if b.name == bucket:
                self._store = b
                break
        # Create bucket if it doesn't exist

        else:
            if(bucket):
                print "do not have the bucket %s " % bucket
                self._store = self._conn.create_bucket(bucket)
            else:
                print "no bucket!"

        # Set bucket permission ('private', 'public-read',
        # 'public-read-write', 'authenticated-read'
 #       self._store.set_acl(kw.get('acl', 'private'))
        # Updated flag used for avoiding network calls
        self._updated, self._keys = True, None

    def __getitem__(self, key):
        rkey = self._store.lookup(key)
        if rkey is None:
            raise KeyError(key)
        # Fetch string
        value = self.loads(rkey.get_contents_as_string())
        # Flag that the store has not been updated
        self._updated = False
        return value

    def __setitem__(self, key, value):
        rkey = Key(self._store)
        rkey.key = key
        rkey.set_contents_from_string(self.dumps(value))
        # Flag that the store has been updated
        self._updated = True

    def __delitem__(self, key):
        try:
            self._store.delete_key(key)
            # Flag that the store has been updated
            self._updated = True
        except:
            raise KeyError(key)

    def keys(self):
        '''Returns a list of keys in the store.'''
        return list(i[0] for i in self.items())

    def items(self):
        '''Returns a list of items from the store.'''
        if self._updated or self._keys is None:
            self._keys = self._store.get_all_keys()
        return list((str(k.key), k) for k in self._keys)

    def iteritems(self):
        '''Lazily returns items from the store.'''
        for k in self.items():
            yield (k.key, k)


__all__ = ['S3Store']
